@page "/book/create"
@using BlazerApp1.Data
@using MySql.Data.MySqlClient;
@inject NavigationManager NavigationManager;
<PageTitle>Create a new book</PageTitle>
<h3 class="text-primary">Book A new Create</h3>
<div class="container">
        <div class="">
            <EditForm Model="book" OnValidSubmit="HandleCreateBook">
                <DataAnnotationsValidator/>
                <div class="col-md-12 row">
                    <div class="mb-3 col-md-6">
                        <label class="form-label">Title</label>
                        <InputText class="form-control" @bind-Value=book.Title />
                    <div class="text-danger">
                        <ValidationMessage For="() => book.Title"></ValidationMessage>
                    </div>
                    </div>
                    <div class="mb-3 col-md-6">
                        <label class="form-label">Author</label>
                        <InputText class="form-control" @bind-Value=book.Author />
                    <div class="text-danger">
                        <ValidationMessage For="() => book.Author"></ValidationMessage>
                    </div>
                    </div>
                </div>
            <div class="col-md-12 row">
                <div class="mb-3 col-md-6">
                    <label class="form-label">Genre</label>
                    <InputSelect class="form-control" @bind-Value="book.Genre_id">
                        <option value="0" selected>-- Choose a brand --</option>
                        @foreach (var item in genres)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </InputSelect>
                    <div class="text-danger">
                        <ValidationMessage For="() => book.Genre_id"></ValidationMessage>
                    </div>
                </div>
                <div class="mb-3 col-md-6">
                    <label class="form-label">Published Year</label>
                    <InputNumber class="form-control" @bind-Value="book.PublishedYear" />
                    <div class="text-danger">
                        <ValidationMessage For="() => book.PublishedYear"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="col-md-12 row">
                <div class="mb-3 col-md-6">
                    <label class="form-label">Status</label>
                    <InputSelect class="form-control" @bind-Value=book.Status>
                        <option value="1">Active</option>
                        <option value="0">Deleted</option>
                    </InputSelect>
                </div>
                <div class="mb-3 col-md-6">
                    <label class="form-label">File</label>
                    <InputFile class="form-control" OnChange="HandleFileSeclected"></InputFile>
                    @if (ImageDataUrl != "")
                    {
                        <img src="@ImageDataUrl" style="max-width: 500px;" />
                    }

                </div>
            </div>
                
                <div class="mb-3">
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Save</Button>
                    <Button Type="ButtonType.Link" To="book/list" Color="ButtonColor.Secondary">Back</Button>
                </div>

            </EditForm>
        </div>
    </div>

@code {
    Book book = new Book();
    private IEnumerable<Genre> genres;
    private string ImageDataUrl = "";
    private IBrowserFile selectedFile;

    protected override void OnInitialized()
    {
        genres = GetGenres();
    }

    private async void HandleCreateBook()
    {
        try
        {
            await SaveImageToServer(selectedFile);
            string title = book.Title;
            int status = book.Status;
            string author = book.Author;
            int genre_id = book.Genre_id;
            int publishedYear = book.PublishedYear;
            string image = book.Image;
            string SqlInsertBook = $"INSERT INTO books(title, status, author, genre_id, publishedYear, image) VALUES('{title}', {status}, '{author}', {genre_id}, {publishedYear}, '{image}')";
            MySqlConnection conn = DbMySQLUltil.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = SqlInsertBook;
            cmd.ExecuteNonQuery();
            conn.Close();
            NavigationManager.NavigateTo("/book/list");
        }catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private IEnumerable<Genre> GetGenres()
    {
        List<Genre> list = new List<Genre>();
        try
        {
            string SqlGetGenres = "SELECT * FROM genres";
            MySqlConnection conn = DbMySQLUltil.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = SqlGetGenres;
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
            while (mySqlDataReader.Read())
            {
                int id = mySqlDataReader.GetInt32("id");
                string name = mySqlDataReader.GetString("name");
                Genre genre = new Genre(id, name);
                list.Add(genre);
            }
            conn.Close();

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        return list;
    }

    private async Task HandleFileSeclected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var resizeFile = await e.File.RequestImageFileAsync("image/jpeg", 500, 500);
        var buffer = new byte[resizeFile.Size];
        await resizeFile.OpenReadStream().ReadAsync(buffer);
        ImageDataUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task SaveImageToServer(IBrowserFile file)
    {
        var FileName = file.Name;
        var folderPath = Path.Combine("wwwroot", "uploads"); //wwwroot/uploads
        var filePath = Path.Combine(folderPath, FileName); //wwwroot/uploads/...
        Directory.CreateDirectory(folderPath);
        using (var fileStream = new FileStream(filePath, FileMode.Create))
        {
            await file.OpenReadStream().CopyToAsync(fileStream);
        }
        book.Image = $"uploads/{FileName}";
    }
}
